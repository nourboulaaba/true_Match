{{ form_start(form, {'attr': {'class': 'form-horizontal'}}) }}

<style>
    .form-card {
        border-radius: 1rem;
        border: none;
        transition: transform 0.3s ease;
    }

    .form-card:hover {
        transform: translateY(-5px);
    }

    .gradient-header {
        background: linear-gradient(135deg, #2A4B7C 0%, #3B5998 100%);
        border-radius: 1rem 1rem 0 0 !important;
        padding: 1.5rem 2rem;
    }

    .input-field {
        border: 2px solid #e9ecef;
        border-radius: 0.5rem !important;
        padding: 0.75rem 1.25rem;
        transition: all 0.3s ease;
    }

    .input-field:focus {
        border-color: #2A4B7C;
        box-shadow: 0 0 0 3px rgba(42, 75, 124, 0.1);
    }

    .input-group-text {
        background: #f8f9fa;
        border: 2px solid #e9ecef;
        border-left: none;
    }

    .description-textarea {
        min-height: 150px;
        resize: vertical;
    }

    .btn-ai-gradient {
        background: linear-gradient(45deg, #6a11cb 0%, #2575fc 100%);
        color: white !important;
        border: none;
        padding: 0.75rem 2rem;
        border-radius: 0.5rem;
        transition: all 0.3s ease;
    }

    .btn-ai-gradient:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(106, 17, 203, 0.3);
    }

    .btn-submit {
        width: 100%;
        padding: 1rem;
        font-size: 1.1rem;
        background: linear-gradient(135deg, #2A4B7C 0%, #3B5998 100%);
        border: none;
        border-radius: 0.5rem;
        transition: all 0.3s ease;
    }

    .btn-submit:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(42, 75, 124, 0.3);
    }

    .form-label {
        font-weight: 600;
        color: #2A4B7C;
        padding-top: 0.5rem;
    }

    .invalid-feedback {
        font-weight: 500;
        margin-top: 0.5rem;
    }
</style>


<div class="card form-card shadow-lg">
    <div class="card-header gradient-header">
        <h4 class="mb-0 text-white">üìù Create New Job Offer</h4>
    </div>
    <div class="card-body">
        <div class="form-group row mb-4">
            {{ form_label(form.titre, null, {'label_attr': {'class': 'col-sm-3 col-form-label form-label'}}) }}
            <div class="col-sm-9">
                <div class="input-group">
                    {{ form_widget(form.titre, {'attr': {'class': 'form-control input-field','id':'offre_titre', 'placeholder': 'Senior Developer, Marketing Specialist...'}}) }}
                    <span class="input-group-text"><i class="fas fa-heading"></i></span>
                </div>
                {{ form_errors(form.titre) }}
            </div>
        </div>

        <div class="form-group row mb-4">
            {{ form_label(form.description, null, {'label_attr': {'class': 'col-sm-3 col-form-label form-label'}}) }}
            <div class="col-sm-9">
                <div class="input-group">
                    {{ form_widget(form.description, {'attr': {'class': 'form-control input-field description-textarea','id':'offre_description', 'rows': 6, 'placeholder': 'Describe the position, responsibilities, and requirements...'}}) }}
                    <span class="input-group-text"><i class="fas fa-align-left"></i></span>
                </div>
                {{ form_errors(form.description) }}
                <div class="mt-3 text-center">
                    <button type="button" class="btn btn-ai-gradient" id="generate-ai">
                        <i class="fas fa-robot me-2"></i>Generate with AI
                    </button>
                </div>
            </div>
        </div>

        <div class="row g-4 mb-4">
            <div class="col-md-6">
                <div class="form-group row">
                    {{ form_label(form.salaireMin, null, {'label_attr': {'class': 'col-sm-5 col-form-label form-label'}}) }}
                    <div class="col-sm-7">
                        <div class="input-group">
                            {{ form_widget(form.salaireMin, {'attr': {'class': 'form-control input-field','id':'offre_salaireMin', 'type': 'number', 'placeholder': '3000'}}) }}
                            <span class="input-group-text">‚Ç¨</span>
                        </div>
                        {{ form_errors(form.salaireMin) }}
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group row">
                    {{ form_label(form.salaireMax, null, {'label_attr': {'class': 'col-sm-5 col-form-label form-label'}}) }}
                    <div class="col-sm-7">
                        <div class="input-group">
                            {{ form_widget(form.salaireMax, {'attr': {'class': 'form-control input-field','id':'offre_salaireMax', 'type': 'number', 'placeholder': '4500'}}) }}
                            <span class="input-group-text">‚Ç¨</span>
                        </div>
                        {{ form_errors(form.salaireMax) }}
                    </div>
                </div>
            </div>
        </div>

        <div class="form-group row mb-4">
            {{ form_label(form.departement, null, {'label_attr': {'class': 'col-sm-3 col-form-label form-label'}}) }}
            <div class="col-sm-9">
                <div class="input-group">
                    {{ form_widget(form.departement, {'attr': {'class': 'form-select input-field','id': 'offre_departement'}}) }}
                    <span class="input-group-text"><i class="fas fa-building"></i></span>
                </div>
                {{ form_errors(form.departement) }}
            </div>
        </div>

        <div class="form-group row justify-content-center mt-5">
            <div class="col-sm-9">
                <button type="submit" class="btn btn-primary btn-submit">
                    <i class="fas fa-save me-2"></i>{{ button_label|default('Publish Offer') }}
                </button>
            </div>
        </div>
    </div>
</div>

{# Flash messages and scripts remain the same #}


{% for label, messages in app.flashes %}
    {% for message in messages %}
        <div id="flash-{{ label }}" data-message="{{ message }}"></div>
    {% endfor %}
{% endfor %}
<!-- SweetAlert2 CDN -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const flashSuccess = document.getElementById('flash-success');
        if (flashSuccess) {
            const message = flashSuccess.getAttribute('data-message');
            Swal.fire({
                icon: 'success',
                title: 'Succ√®s !',
                text: message,
                confirmButtonColor: '#3085d6',
                confirmButtonText: 'OK'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = "{{ path('app_offre_index') }}";
                }
            });
        }
    });

</script>


<script>
    document.addEventListener('DOMContentLoaded', () => {
        const form = document.querySelector('form');
        const titre = document.getElementById('offre_titre');
        const description = document.getElementById('offre_description');
        const salaireMin = document.getElementById('offre_salaireMin');
        const salaireMax = document.getElementById('offre_salaireMax');

        const inputs = [titre, description, salaireMin, salaireMax];

        form.setAttribute('novalidate', true);
        function showValidation(input, isValid, message = '') {
            input.classList.remove('is-valid', 'is-invalid');
            const parent = input.parentElement;
            let feedback = parent.querySelector('.invalid-feedback');

            if (!feedback) {
                feedback = document.createElement('div');
                feedback.classList.add('invalid-feedback');
                parent.appendChild(feedback);
            }

            if (isValid) {
                input.classList.add('is-valid');
                feedback.style.display = 'none';
            } else {
                input.classList.add('is-invalid');
                feedback.textContent = message;
                feedback.style.display = 'block';
            }
        }

        function validateField(input) {
            const value = input.value.trim();
            const isNumberField = input.type === 'number';

            if (input === titre) {
                if (!value) return "Le titre ne peut pas √™tre vide.";
                if (/\d/.test(value)) return "Le titre ne peut pas contenir de chiffres.";
            }

            if (input === description) {
                if (!value) return "La description ne peut pas √™tre vide.";
            }

            if (input === salaireMin || input === salaireMax) {
                const numValue = parseInt(value);
                if (isNaN(numValue)) return "Veuillez entrer un nombre valide.";
                if (numValue <= 0) return "La valeur doit √™tre sup√©rieure √† 0.";

                if (input === salaireMax) {
                    const min = parseInt(salaireMin.value);
                    if (!isNaN(min) && numValue <= min) return "Le salaire maximum doit √™tre sup√©rieur au salaire minimum.";
                }
            }

            return null;
        }

        function validateAllFields() {
            let isValid = true;

            inputs.forEach(input => {
                const error = validateField(input);
                if (error) {
                    showValidation(input, false, error);
                    isValid = false;
                } else {
                    showValidation(input, true);
                }
            });

            return isValid;
        }

        // Form submit handler
        form.addEventListener('submit', (e) => {
            const isValid = validateAllFields();
            if (!isValid) {
                e.preventDefault();
                const firstInvalid = inputs.find(input => input.classList.contains('is-invalid'));
                firstInvalid?.scrollIntoView({ behavior: 'smooth', block: 'center' });
                firstInvalid?.focus();
            }
        });

        inputs.forEach(input => {
            input.addEventListener('input', () => {
                const error = validateField(input);
                if (error) {
                    showValidation(input, false, error);
                } else {
                    showValidation(input, true);
                }
            });
        });


        // Existing input listeners
        titre.addEventListener('input', () => {
            const value = titre.value;
            if (!value.trim()) {
                showValidation(titre, false, "Le titre ne peut pas √™tre vide.");
            } else if (/\d/.test(value)) {
                showValidation(titre, false, "Le titre ne peut pas contenir de chiffres.");
            } else {
                showValidation(titre, true);
            }
        });

        description.addEventListener('input', () => {
            const value = description.value;
            if (!value.trim()) {
                showValidation(description, false, "La description ne peut pas √™tre vide.");
            } else {
                showValidation(description, true);
            }
        });

        salaireMin.addEventListener('input', () => {
            const value = parseInt(salaireMin.value);
            if (isNaN(value) || value <= 0) {
                showValidation(salaireMin, false, "Le salaire minimum doit √™tre sup√©rieur √† 0.");
            } else {
                showValidation(salaireMin, true);
            }
            salaireMax.dispatchEvent(new Event('input'));
        });

        salaireMax.addEventListener('input', () => {
            const min = parseInt(salaireMin.value);
            const max = parseInt(salaireMax.value);
            if (isNaN(max) || max <= 0) {
                showValidation(salaireMax, false, "Le salaire maximum doit √™tre sup√©rieur √† 0.");
            } else if (!isNaN(min) && max <= min) {
                showValidation(salaireMax, false, "Le salaire maximum doit √™tre sup√©rieur au salaire minimum.");
            } else {
                showValidation(salaireMax, true);
            }
        });
    });

    document.addEventListener('DOMContentLoaded', function () {
        const aiBtn = document.getElementById('generate-ai');
        const titreInput = document.querySelector('[name$="[titre]"]');
        const descriptionInput = document.getElementById('offre_description');

        aiBtn.addEventListener('click', async () => {
            const titre = titreInput.value.trim();
            //const currentDescription = descriptionInput.value.trim();

            if (!titre) {
                alert("Veuillez d'abord entrer un titre.");
                return;
            }

            try {
                const response = await fetch('{{ path('app_ai_generate_description') }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({ titre })
                });

                if (!response.ok) throw new Error('Erreur AI');

                const data = await response.json();
                console.log(data);
                descriptionInput.value = data.suggestion;
            } catch (error) {
                console.error(error);
                alert("Une erreur est survenue lors de la g√©n√©ration de la description.");
            }
        });
    });
</script>

{{ form_end(form) }}
